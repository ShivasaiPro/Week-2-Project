 express = require('express'); const mongoose = require('mongoose'); const bcrypt = require('bcrypt'); const jwt = require('jsonwebtoken'); const cors = require('cors');

const app = express(); app.use(express.json()); app.use(cors());

mongoose.connect('mongodb://localhost:27017/auctionDB', { useNewUrlParser: true, useUnifiedTopology: true, });

const userSchema = new mongoose.Schema({ name: String, email: String, password: String, dob: Date, rollNo: String, college: String });

const auctionSchema = new mongoose.Schema({ title: String, description: String, link: String, img: String });

const User = mongoose.model('User', userSchema); const Auction = mongoose.model('Auction', auctionSchema);

// Signup API app.post('/signup', async (req, res) => { try { const { name, email, password, dob, rollNo, college } = req.body; const hashedPassword = await bcrypt.hash(password, 10); const newUser = new User({ name, email, password: hashedPassword, dob, rollNo, college }); await newUser.save(); res.status(201).json({ message: 'User registered successfully' }); } catch (error) { res.status(500).json({ error: error.message }); } });

// Signin API app.post('/signin', async (req, res) => { try { const { rollNo, password } = req.body; const user = await User.findOne({ rollNo }); if (!user || !(await bcrypt.compare(password, user.password))) { return res.status(401).json({ message: 'Invalid credentials' }); } const token = jwt.sign({ userId: user._id }, 'secret_key', { expiresIn: '1h' }); res.json({ message: 'Login successful', token }); } catch (error) { res.status(500).json({ error: error.message }); } });

// Add Auction Data app.post('/add-auction', async (req, res) => { try { const { title, description, link, img } = req.body; const newAuction = new Auction({ title, description, link, img }); await newAuction.save(); res.status(201).json({ message: 'Auction added successfully' }); } catch (error) { res.status(500).json({ error: error.message }); } });

// Retrieve Auction Data app.get('/auctions', async (req, res) => { try { const auctions = await Auction.find(); res.json(auctions); } catch (error) { res.status(500).json({ error: error.message }); } });

const PORT = 5000; app.listen(PORT, () => console.log(Server running on port ${PORT}));
